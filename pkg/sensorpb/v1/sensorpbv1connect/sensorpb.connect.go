// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: sensorpb/v1/sensorpb.proto

package sensorpbv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/samoilenko/cossack_labs/pkg/sensorpb/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SensorServiceName is the fully-qualified name of the SensorService service.
	SensorServiceName = "sensorpb.v1.SensorService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SensorServiceGetStreamProcedure is the fully-qualified name of the SensorService's GetStream RPC.
	SensorServiceGetStreamProcedure = "/sensorpb.v1.SensorService/GetStream"
)

// SensorServiceClient is a client for the sensorpb.v1.SensorService service.
type SensorServiceClient interface {
	GetStream(context.Context) *connect.BidiStreamForClient[v1.SensorData, v1.Response]
}

// NewSensorServiceClient constructs a client for the sensorpb.v1.SensorService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSensorServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SensorServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	sensorServiceMethods := v1.File_sensorpb_v1_sensorpb_proto.Services().ByName("SensorService").Methods()
	return &sensorServiceClient{
		getStream: connect.NewClient[v1.SensorData, v1.Response](
			httpClient,
			baseURL+SensorServiceGetStreamProcedure,
			connect.WithSchema(sensorServiceMethods.ByName("GetStream")),
			connect.WithClientOptions(opts...),
		),
	}
}

// sensorServiceClient implements SensorServiceClient.
type sensorServiceClient struct {
	getStream *connect.Client[v1.SensorData, v1.Response]
}

// GetStream calls sensorpb.v1.SensorService.GetStream.
func (c *sensorServiceClient) GetStream(ctx context.Context) *connect.BidiStreamForClient[v1.SensorData, v1.Response] {
	return c.getStream.CallBidiStream(ctx)
}

// SensorServiceHandler is an implementation of the sensorpb.v1.SensorService service.
type SensorServiceHandler interface {
	GetStream(context.Context, *connect.BidiStream[v1.SensorData, v1.Response]) error
}

// NewSensorServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSensorServiceHandler(svc SensorServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	sensorServiceMethods := v1.File_sensorpb_v1_sensorpb_proto.Services().ByName("SensorService").Methods()
	sensorServiceGetStreamHandler := connect.NewBidiStreamHandler(
		SensorServiceGetStreamProcedure,
		svc.GetStream,
		connect.WithSchema(sensorServiceMethods.ByName("GetStream")),
		connect.WithHandlerOptions(opts...),
	)
	return "/sensorpb.v1.SensorService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SensorServiceGetStreamProcedure:
			sensorServiceGetStreamHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSensorServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSensorServiceHandler struct{}

func (UnimplementedSensorServiceHandler) GetStream(context.Context, *connect.BidiStream[v1.SensorData, v1.Response]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("sensorpb.v1.SensorService.GetStream is not implemented"))
}
